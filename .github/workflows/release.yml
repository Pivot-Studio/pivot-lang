name: release
on:
  push:
    branches:
      - master
      - release/*


jobs:
  artifacts:
    name: Artifacts
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: true
      matrix:
        config:
          - os: "macOS-latest"
            dir: osx64
            arch: darwin-arm64
            artifacts: "plc"
            RUSTFLAGS: ""
          - os: "macOS-latest"
            dir: osx64
            arch: darwin-amd64
            artifacts: "plc"
            RUSTFLAGS: ""
          - os: "ubuntu-latest"
            dir: linux64
            debdir: pivot-lang_0.1.0-1_amd64
            artifacts: "plc"
            arch: linux-amd64
            RUSTFLAGS: ""
          # - os: "windows-latest"
          #   dir: win64
          #   artifacts: "plc.exe"
          #   RUSTFLAGS: "-Dwarnings -Ctarget-feature=+crt-static"
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup | Rust
        uses: ATiltedTree/setup-rust@v1
        with:
          rust-version: "1.62.1"

      - uses: actions/cache@v3
        name: Cache Cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install LLVM
        uses: Pivot-Studio/setup-llvm@main
      
      - name: set up win scoop
        if: ${{ matrix.config.os == 'windows-latest' }}
        uses: MinoruSekine/setup-scoop@main

      - name: Install LLVM and Clang win
        if: ${{ matrix.config.os == 'windows-latest' }}
        run: |
          scoop install 7zip
          scoop install wget
          wget https://github.com/Pivot-Studio/pivot-lang/releases/download/llvm-windows-latest/llvm-14.0.6-windows-x64-msvc17.7z
          7z x .\llvm-14.0.6-windows-x64-msvc17.7z -y -o${{ runner.temp }}\llvm
          [Environment]::SetEnvironmentVariable(
            "Path",
            [Environment]::GetEnvironmentVariable("Path", "User") + ";${{ runner.temp }}\llvm\bin",
            "User"
          )
          [Environment]::SetEnvironmentVariable('LLVM_SYS_140_PREFIX', '${{ runner.temp }}\llvm', 'User')
  
      - uses: ilammy/msvc-dev-cmd@v1
        if: ${{ matrix.config.os == 'windows-latest' }}
        with:
          arch: x64
          vs_version: 2022
      - name: Cargo build win
        if: ${{ matrix.config.os == 'windows-latest' }}
        env:
          RUSTFLAGS: ${{ matrix.config.RUSTFLAGS }}
        run: cargo build --release --verbose

      - name: Cargo build
        if: ${{ matrix.config.os != 'windows-latest' }}
        env:
          RUSTFLAGS: ${{ matrix.config.RUSTFLAGS }}
        run: cargo build --release

      - name: Cargo build vm
        if: ${{ matrix.config.os != 'windows-latest' }}
        env:
          RUSTFLAGS: ${{ matrix.config.RUSTFLAGS }}
        run: cd vm && cargo build --release

      - run: mkdir -p ${{ matrix.config.dir }}

      - name: Move artifacts
        env:
          ARTIFACTS: ${{ matrix.config.artifacts }}
          OUT_DIR: ${{ matrix.config.dir }}
          OS: ${{ matrix.config.os }}
        run: |
          import os
          import shutil
          artifacts = os.environ['ARTIFACTS'].split()
          for artifact in artifacts:
            src = "target/release/%s" % artifact
            dst = os.environ['OUT_DIR'] + "/" + artifact
            shutil.copy(src, dst)
        shell: python

      - name: Move libvm
        env:
          ARTIFACTS: libvm.a
          OUT_DIR: ${{ matrix.config.dir }}
          OS: ${{ matrix.config.os }}
        run: |
          import os
          import shutil
          artifacts = os.environ['ARTIFACTS'].split()
          for artifact in artifacts:
            src = "target/release/%s" % artifact
            dst = os.environ['OUT_DIR'] + "/" + artifact
            shutil.copy(src, dst)
        shell: python
      - name: Move pllib
        env:
          ARTIFACTS: planglib
          OUT_DIR: ${{ matrix.config.dir }}
          OS: ${{ matrix.config.os }}
        run: |
          import os
          import shutil
          artifacts = os.environ['ARTIFACTS'].split()
          for artifact in artifacts:
            src = "%s" % artifact
            dst = os.environ['OUT_DIR'] + "/" + artifact
            shutil.copytree(src, dst)
        shell: python

      - if: ${{ matrix.config.os == 'ubuntu-latest' }}
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - if: ${{ matrix.config.os == 'ubuntu-latest' }}
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - if: ${{ matrix.config.os == 'ubuntu-latest' }}
        name: Login to ali registry
        uses: docker/login-action@v2
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - if: ${{ matrix.config.os == 'ubuntu-latest' }}
        name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          file: ./Dockerfile
          tags: registry.cn-hangzhou.aliyuncs.com/pivot_studio/pivot_lang:latest
      - name: prepare deb
        if: ${{ matrix.config.os == 'ubuntu-latest' }}
        run: |
          mkdir -p ${{ matrix.config.debdir }}
          cp -r deb/* ${{ matrix.config.debdir }}/
          rm ${{ matrix.config.debdir }}/apt.yaml
          cp book/nginx.conf nginx.conf
          cp book/Dockerfile Dockerfile
          ls ${{ matrix.config.debdir }}/
          chmod +x ${{ matrix.config.debdir }}/DEBIAN/postinst
          mkdir -p ${{ matrix.config.debdir }}/usr/bin
          cp ${{ matrix.config.dir }}/plc ${{ matrix.config.debdir }}/usr/bin
          mkdir -p ${{ matrix.config.debdir }}/pl
          cp -r ${{ matrix.config.dir }}/* ${{ matrix.config.debdir }}/pl
          rm ${{ matrix.config.debdir }}/pl/plc
      - uses: Pivot-Studio/build-deb-action@master
        if: ${{ matrix.config.os == 'ubuntu-latest' }}
        id: build-deb
        with:
          package: pivot-lang
          package_root: ${{ matrix.config.debdir }}
          maintainer: Chronos <1769712655@qq.com>
          version: 0.1.${{ github.run_number }} # refs/tags/v*.*.*
          arch: 'amd64'
          desc: 'pivot-lang compiler'
          depends: build-essential, git, libunwind-dev, libxml2
      - name: move deb
        if: ${{ matrix.config.os == 'ubuntu-latest' }}
        run: |
          cp ${{ steps.build-deb.outputs.file_name }} ${{ matrix.config.dir }}/
      - name: Update apt repo
        if: ${{ matrix.config.os == 'ubuntu-latest' }}
        uses: Pivot-Studio/apt-repo-action@master
        with:
          github_token: ${{ secrets.PAT }}
          repo_supported_arch: |
            amd64
          repo_supported_version: |
            jammy
            focal
          file: ${{ steps.build-deb.outputs.file_name }}
          file_target_version: jammy
          public_key: ${{ secrets.PUBLIC }}
          private_key: ${{ secrets.PRIVATE }}
          key_passphrase: ${{ secrets.SECRET }}
          page_branch: master
          github_repository: Pivot-Studio/apt-repo

      - name: tar artifacts
        if: ${{ matrix.config.os != 'windows-latest' }}
        env:
          OUT_DIR: ${{ matrix.config.dir }}
          OS: ${{ matrix.config.os }}
        run: |
          import os
          src = os.environ['OUT_DIR']
          dst = "pivot-lang-0.1.${{ github.run_number }}-${{ matrix.config.arch }}.tar.gz"
          os.system("tar -czvf %s %s" % (dst, src))
        shell: python
      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - uses: ncipollo/release-action@v1
        name: upload
        with:
          artifacts: "pivot-lang-0.1.${{ github.run_number }}-${{ matrix.config.arch }}.tar.gz"
          allowUpdates: true
          replacesArtifacts: false
          commit: master
          tag: v0.1.${{ github.run_number }}
