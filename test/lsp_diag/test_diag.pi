use test::m1;

trait TestTrait {
}

struct A {
}

impl TestTrait for A {
}

struct B<T> {
    x: BInner<T>;
}

struct BInner<T: TestTrait> {
    x: T;
}

type AA = A | i64;
fn test_mismatch() void {
    let a: AA = 1.0;
    let aa: AA = 1 as i64;
    let b = aa as f32;
    let bb = aa as f32!;
    let c = aa is f32;
    let cc = 1 is f32;
    return;
}

use std::io
fn test_semi() void {
    let a = 1
    test_semi()
    return;
}

trait TA {
}

trait TB: TA {
}

impl TB for A {
}

struct selfref {
    a:selfref2;
}

struct selfref2 {
    b:selfref;
}

use test::trait_diag;
use std::iter::Iterator;

gen fn iter_test() Iterator<i64> {
    
    return 1;
}



fn iter_test1() Iterator<i64> {
    
    yield return 1;
}


gen fn iter_test3() i64 {
    
    yield return 1;
}

gen fn iter_test4() Iterator<i64>  {
    
    yield return 1.0;
}


macro test {
    ($a:@id) => {
        test!($a);
    };
    ($($a:@id = $b:@expr,)*) => {
        $(
            test!($a);
            io::printi64ln($b);  
        )*

    };
}

gen fn iter_test5() Iterator<i64>  {
    test!();
}


struct BB<T:TestTrait> {
    x: BInner<T>;
}

trait TestTrait2 {
}


struct BBB<T:TestTrait+TestTrait2> {
    x: BInner<T>;
}


var AAAA = &1;

fn arg_ptr(a:i64) void {
    arg_ptr(AAAA);
    arg_ptr(*AAAA);
    arg_ptr(&*AAAA);
    return;
}

use test::match_diag;


fn testf<T>() void {
    let a = testf;
    if {

    }
    while {

    }
    for {

    }
    let b = arg_ptr;
    return;
}

async fn test_async() void {
    
    return;
}


use std::task::Task;

async fn async_f1() Task<()> {
    return 1;
}


fn test_f_diag1(a,) void {
    
    return;
}

fn test_f_diag2(,) {
    
    return;
}

fn test_f_diag3(a, b:i64) void {
    await test_f_diag2();
    return;
}

