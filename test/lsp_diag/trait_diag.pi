use core::panic;
trait TestTrait {
    fn name() void;

    fn set(i: i64) i64;

}

trait generic_trait1<T> {
    fn name1(t:T) void;
}

trait generic_trait2<T> :generic_trait1<T> {
    fn name2(t:T) void;
}

pub struct A {
    x: i64;
}


trait generic_trait3<T> {
    fn name3(t:T) void;
}


impl generic_trait3<i64> for A {
    fn name3(t: i64) void {
        return;
    }
}



impl <T> generic_trait2<T> for A {
    fn name2(t: T) void {
        return;
    }
}


impl <T> generic_trait1<T> for A {
    fn name1(t: T) void {
        return;
    }
}

struct B<T> {
    
}

struct C<T> {
    
}

impl <T> generic_trait1<T> for C<T> {
}


struct D<T> {
    
}

impl <T> generic_trait2<T> for D<T> {
    fn name2(t: T) void {
        return;
    }
}

impl <T> generic_trait1<T> for B<T> {
    fn name1(t: T) void {
        return;
    }
}

impl TestTrait for A {
    fn name() void {
        return;
    }

    fn set(i: i64) i64 {
        self.x = i;
        return i;
    }

}

pub fn test_trait() void {
    let x = &A{};
    let y = A{};
    let z = &&A{};
    y.name1(100);
    y.name1(1.0);
    y.name2(1);
    y.name3(1);
    let yy:generic_trait3<f32> = y;
    let a = B<i64>{};
    a.name1(1);
    let b:generic_trait1<f32> = a;
    b.name1(1);
    let dd: TestTrait;
    dd = x;
    dd = y;
    dd = z;
    let _c = dd as A;
    let _cc = dd as B<i64>?;
    let _ccc = dd as C<i64>!;
    let re = dd.set(100);
    panic::assert(re == 100);
    let re1 = trait_ret().set(1);
    panic::assert(re1 == 1);
    let re2 = trait_with_generic(x);
    panic::assert(re2 == 999);
    let re3 = trait_with_generic_ret(x, y);
    panic::assert(re3.x == 999);
    let st = StWithTrait{
        x: Inner{
            y: &y
        }
    };
    st.call_trait();
    fn_with_trait(y);
    fn_with_trait(y);
    return;
}

pub fn trait_ret() TestTrait {
    let x = A{};
    return x;
}

pub fn trait_with_generic<T>(x: T) i64
where
    T: TestTrait
{
    x.name();
    return x.set(999);
}

pub fn trait_with_generic_ret<T|S>(x: T, y: S) T
where
    T: TestTrait,
    S: TestTrait
{
    x.name();
    y.name();
    return x;
}

pub fn fn_with_trait<T: TestTrait>(x: T) void {
    x.name();
    return;
}

struct StWithTrait<T: TestTrait> {
    x: Inner<T>;
}

impl<J: TestTrait> StWithTrait<J> {
    fn call_trait() void {
        self.x.y.name();
        return;
    }

}

struct Inner<T: TestTrait> {
    y: T;
}

pub trait test<T> {
    fn next() AA;
}


impl A for B {

}
