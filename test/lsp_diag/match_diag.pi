

fn test_match() void {
    match 1 {
        1 => {
            return;
        }
        "dasda" => {
            return;
        }
        i64(_) => {
            return;
        }
        {a:0} => {}
        true => {}
        1.0 => {}
        _ => {
            return;
        }
    }

    match true {
        false => {
            
        }
        _ => {
        }
    }

    let a = 1 as Option<i64>;
    match a {
        i64(x) => {
            return;
        }
        1 => {
            return;
        }
        f64(_) => {
            return;
        }
        None(_) => {
            return;
        }
    }

    match 'a' {
        'b' => {
            
        }
        "s" => {
            return;
        }
        _ => {
        }
    }

    match 1.0 {
        1.1 => {
            
        }
        1 => {}
        TestTrait(a) => {
            
        }
        _ => {
        }
    }

    match (1,2) {
        (1,,2,) => {
            return;
        }
        (1,_,_) => {
            return;
        }
        () => {}
        (a,()a, dasdas) => {
            return;
        }
        (_,2) => {
            return;
        }
    }


    let aa: TestTrait;
    match aa {
        pattern => {
            
        }
        _ => {
        }
    }

    match (1,2,3) {
        TestTrait(a) => {
            
        }
        _ => {
        }
    }
    let aaa = TestST{a:1};
    match aaa {
        {b:a} => {
            
        }
        _ => {
        }
    }



    return;
}


trait TestTrait {
}

struct TestST {
    a:i64;
    
}