use core::panic;
pub fn test_warn() void {
    return;
    let x = 1;
    panic::pl_panic();
}

pub fn test_primitives() void {
    let test: i8 = 1;
    test = -test;
    let test2: i8 = test + 1;
    let testf32: f32 = 1.1;
    testf32 = -testf32;
    testf32 = testf32 + 1.2;
    let utest: u8 = 1;
    utest = utest + 2;
    test = 127;
    test = -test - 1;
    panic::assert(test as i64 == -128);
    let b = test | 1;
    panic::assert(b as i64 == -127);
    let c = test & 1;
    panic::assert(c == 0);
    let d = test ^ 1;
    panic::assert(d as i64 == -127);
    let e = test << 1;
    panic::assert(e as i64 == 0);
    let f = test >> 1;
    panic::assert(f as i64 == -64);
    let g = test >>> 1;
    panic::assert(g as i64 == 64);
    let h = ~test ;
    panic::assert(h as i64 == 127);
    return;
}

pub fn test_vm_link() i64;

pub fn test_vm() void {
    panic::assert(test_vm_link() == 66);
    return;
}

pub fn test_pointer() void {
    let a = 1;
    let b = &a;
    *b = 100;
    panic::assert(*b == 100);
    panic::assert(a == 100);
    return;
}

pub fn test_simple() void {
    test_vm();
    test_primitives();
    test_warn();
    test_pointer();
    return;
}

