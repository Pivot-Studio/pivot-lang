use project1::mod1;
use core::panic;
trait TestTrait {
    fn name() void;

    fn set(i: i64) i64;

}

pub struct A {
    x: i64;
}

impl TestTrait for A {
    fn name() void {
        return;
    }

    fn set(i: i64) i64 {
        self.x = i;
        return i;
    }

}

pub fn test_trait() void {
    let x = &A{};
    let y = A{};
    let z = &&A{};
    let dd: TestTrait;
    dd = x;
    dd = y;
    dd = z;
    let re = dd.set(100);
    panic::assert(re == 100);
    let re1 = trait_ret().set(1);
    panic::assert(re1 == 1);
    let re2 = trait_with_generic(x);
    panic::assert(re2 == 999);
    let re3 = trait_with_generic_ret(x, y);
    panic::assert(re3.x == 999);
    let st = StWithTrait{
        x: Inner{
            y: &y
        }
    };
    st.call_trait();
    fn_with_trait(y);
    fn_with_trait(y);
    return;
}

pub fn trait_ret() TestTrait {
    let x = A{};
    return x;
}

pub fn trait_with_generic<T>(x: T) i64
where
    T: TestTrait
{
    x.name();
    return x.set(999);
}

pub fn trait_with_generic_ret<T|S>(x: T, y: S) T
where
    T: TestTrait,
    S: TestTrait
{
    x.name();
    y.name();
    return x;
}

pub fn fn_with_trait<T: TestTrait>(x: T) void {
    x.name();
    return;
}

struct StWithTrait<T: TestTrait> {
    x: Inner<T>;
}

impl<J: TestTrait> StWithTrait<J> {
    fn call_trait() void {
        self.x.y.name();
        return;
    }

}

struct Inner<T: TestTrait> {
    y: T;
}

