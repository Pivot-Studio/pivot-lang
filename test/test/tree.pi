struct Node {
    left: Option<*Node>;
    right: Option<*Node>;
}


fn build_tree() Node {
    let n = &Node{};
    let orin = n;
    for let i = 0; i < 10; i = i + 1 {
        n.left = &Node{};
        n.right = &Node{};
        if i - i/2*2 == 1 {
            n.left = &Node{};
            n = n.left as *Node!;
        } else {
            n.right = &Node{};
            n = n.right as *Node!;
        }
    }
    n = orin;
    for let i = 0; i < 10; i = i + 1 {
        if i - i/2*2 == 1 {
            n = n.left as *Node!;
        } else {
            n = n.right as *Node!;
        }
    }
    return *orin;
}

/// 测试驱逐算法
/// 
/// 这里应该会触发驱逐算法
/// 
/// 如果我们没有正确处理引用关系或者gc存在bug，很可能会导致segfault
pub fn test_eva() void {
    let n = build_tree();
    for let i = 0; i < 10; i = i + 1 {
        if i - i/2*2 == 1 {
            n = *n.left as *Node!;
        } else {
            n = *n.right as *Node!;
        }
    }
    return;
}
