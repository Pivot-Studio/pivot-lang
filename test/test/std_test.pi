use core::panic;
use std::string;
use std::math::F64Ext;
use std::task::Task;
use std::io;
use project1::test::iter;
use std::task::delay;



async fn async_f1() Task<()> {
    let ct = CustomTask{first:true};
    let d = await (ct as Task<i64>);
    panic::assert(d == 100);
    d = await async_f2();
    panic::assert(d == 102);
    return ();
}


async fn async_f2( ) Task<i64> {
    return 102;
}

struct CustomTask {
    first: bool;
}

impl Task<i64> for CustomTask {
    fn poll(_f:||=>void) Option<i64> {
        if self.first {
            self.first = false;
            return None{} as Option<i64>;
        }
        return 100 as Option<i64>;
    }
}


pub fn test_std() void {
    iter::test_generator();
    println!("test_gen done");
    let re = "abcde".index_of("cde");
    let chars = [1,2,3];
    let subchars = [3];
    let re1 =  chars.index_of(subchars);
    panic::assert(re is i64);
    panic::assert((re as i64!) == 2);
    re = "abfdscdcdcdcde".index_of("cdcde"); // will auto use kmp
    panic::assert(re is i64);
    panic::assert((re as i64!) == 9);

    panic::assert(re1 is i64);
    panic::assert((re1 as i64!) == 2);
    panic::assert("abcde".index_of("dde") is None);
    panic::assert("今宵又，折长柳。月娥抛落杯中酒".contains("折长柳"));
    panic::assert(!"今宵又，折长柳。月娥抛落杯中酒".contains("折短柳"));
    panic::assert("月娥抛落杯中酒".chars().eq(&['月', '娥', '抛', '落', '杯', '中', '酒']));
    panic::assert(string::from_chars("月娥抛落杯中酒".chars()).eq(&"月娥抛落杯中酒"));
    panic::assert("今宵又，折长柳。月娥抛落杯中酒".slice(8, 7).eq(&"月娥抛落杯中酒"));
    panic::assert([1,2,3].slice(2, 1).eq(&[3]));
    let arr1 = [1,3,5];
    let arr2 = [3,2,1];
    arr1.copy(arr2, 2);
    panic::assert(arr2.eq(&[1,3,1]));
    arr1.slice(2, 1)[0] = 9;
    panic::assert(arr1.eq(&[1,3,9]));
    panic::assert( 2.0.powf(2.0)==4.0);
    let r = 2.0.powf(2.1);
    panic::assert(r==4.287093850143365);
    let m = math::max(1, 2);
    panic::assert(m==2);
    let mi = math::min(1.0, 2.0);
    panic::assert(mi==1.0);
    panic::assert((math::cos(math::PI) - -1.0).abs() < 0.0000001);
    println!("math done");
    let task = async_f1();
    task.poll(||=>{
        return;
    });
    task.poll(||=>{
        return;
    });   


    let a = 1;
    let b = 2;


    let as_cl = async |c:test|=> {
        panic::assert(a == 1);
        panic::assert(b == 2);
        b = 100;
        panic::assert(c.a == 1234);
        return ();
    };
    let g = as_cl(test{a:1234});
    g.poll(||=>void {
        return;
    });
    g = async_f_1(a,test{a:2345});
    g.poll(||=>void {
        return;
    });
    panic::assert(b == 100);
    fn1(test{a:9999});
    println!("async done");
    test_json();
    println!("json done");
    return;
}

pub async fn test_nested_async_closure() Task<()> {
    let a = 1;
    let f =async || => {
        let f =async || => {
            
            panic::assert(a == 1);
            a = 101110;
            return ();
        }; 
        panic::assert(a == 1);

        await f();
        panic::assert(a == 101110);


        a = 101111;
        return ();
    };
    panic::assert(a == 1);
    await f();
    panic::assert(a == 101111);
    return ();
}


pub fn test_nested_async_closure_in_normal_f() Task<()> {
    let a = 1;
    let f =async || => {
        let f =async || => {
            
            panic::assert(a == 1);
            a = 101110;
            return ();
        }; 
        panic::assert(a == 1);

        await f();
        panic::assert(a == 101110);


        a = 101111;
        return ();
    };
    let re = f();
    return re;
}

pub fn test_nested_async_closure_in_normal_f2() Task<()> {
    let a = 1;
    let f =async || => {
        a = 1;
        let f =async || => {
            
            panic::assert(a == 1);
            a = 101110;
            return ();
        }; 
        panic::assert(a == 1);

        await f();
        panic::assert(a == 101110);


        a = 101111;
        return ();
    };
    let re = f();
    return re;
}



async fn async_f_1(a:i64, b :test) Task<()> {
    panic::assert(a == 1);
    panic::assert(b.a == 2345);
    return ();
}

struct test {
    a:i64;
}

fn fn1(t:test) void {
    panic::assert(t.a == 9999);
    return;
}

pub async fn test_delay() Task<()> {
    println!("async 1");
    let d = spawn(delay::delay(2000 as u64));
    await delay::delay(2000 as u64);
    println!("async 1 end");
    await d;
    println!("async 2 end");
    return ();
}

use std::json::encode::encode;

pub fn test_json() void {
    let nested = JSONObj{
        data:JSONObj{data:1, a:1, b:"2"}, 
        a:1, 
        b:"3"
    };
    let re = encode(nested);
    println!(re);
    return;
}

pub struct JSONObj<T> {
    data: T;
    a: i64;
    b: string;
}


