use core::hash::pl_hash::*;
use std::cols::hashtable;
use core::panic;
use core::eq::Eq;

pub fn test_hashtable() i64 {

    

    let table1 = hashtable::new_hash_table(10 as u64, 100 as u64);
    table1.insert(1, "");

    let table;
    table = hashtable::new_hash_table(10 as u64, 100 as u64);
    table.insert("hi", "World");
    table.insert("tj", "love hj");
    let v = table.get("hi") as string!;
    panic::assert(v.eq(&"World"));
    v = table.get("tj") as string!;
    panic::assert(v.eq(&"love hj"));
    table.insert("hi", "World2");
    v = table.get("hi") as string!;
    panic::assert(v.eq(&"World2"));
    // count len
    let count = 0;
    let iter = table.into_iter();
    for let re = iter.next();!re is None ; re = iter.next() {
        count = count + 1;
    }
    panic::assert(count.eq(&2));
    let str = "1";
    for let i = 0; i < 10; i = i + 1 {
        str.append("1");
        table.insert(str, "World2");
    }
    // println!(table.bucket_size());
    let i_table = hashtable::new_hash_table(10 as u64, 100 as u64);
    i_table.insert(1, 2);
    i_table.insert(3, 4);
    let one =  i_table.get(1) as i64!;
    let three = i_table.get(3) as i64!;
    panic::assert(one.eq(&2));
    panic::assert(three.eq(&4));
    return 0;
}
