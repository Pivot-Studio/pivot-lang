use core::panic;
use project1::test::multi_trait_st::test_struct;
use project1::test::multi_trait_A::A;
trait B {
    fn b() i64;

}

trait C: A+B {
    fn c() void;

}

pub fn test_multi_trait() void {
    let t = test_struct{};
    let c: C;
    c = t as C;
    let d = c is test_struct;
    panic::assert(d);
    let _casted_0 = c as test_struct!;
    let tt = test_generic_struct<i64>{};
    let cc: B;
    cc = tt;
    let dd = cc is test_generic_struct<i64>;
    panic::assert(dd);
    let _casted_1 = cc as test_generic_struct<i64>!;
    let x = c.a();
    let y = c.b();
    panic::assert(x);
    panic::assert(y == 1000);
    panic::assert(trait_with_generic(t) == 1000);
    cc = c as B;
    dd = cc is test_struct;
    panic::assert(dd);
    y = cc.b();
    panic::assert(y == 1000);
    return;
}

impl C for test_struct {
    fn c() void {
        return;
    }

}

impl B for test_struct {
    fn b() i64 {
        return 1000;
    }

}

fn trait_with_generic<T: A+B>(x: T) i64 {
    x.a();
    let i = x.b();
    return i;
}


impl B for test_generic_struct<i64> {
    fn b() i64 {
        return 1000;
    }
}


struct test_generic_struct<T> {
    
}
