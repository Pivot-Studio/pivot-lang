use std::chan::*;
use std::future::*;
fn new_thread(f: *||=>void) i128;
fn sleep(secs: u64) void;
pub struct SharedState {
    completed: bool;
    waker: Option<Waker>;
}

pub struct TimerFuture {
    shared_state: *SharedState;
}

impl Future<()> for TimerFuture {
    fn poll(wk: Waker) Poll<()> {
        let shared_state = self.shared_state;
        println!("polling");
        if shared_state.completed{
            return Ready<()>{v: ()};
        }else{
            shared_state.waker = wk;
            return Pending{};
        }
    }
}

pub struct TimeWaker {
    task: *Task;
}

impl Waker for TimeWaker {
    fn wake() void {
        self.task.sender.send(self.task);
        return;
    }
}
// var fff =&||=>void{
//     return;
// };

pub fn new_tf(secs: u64)*TimerFuture{
    let shared_state = &SharedState {};
    shared_state.completed = false;
    shared_state.waker = None{};
    let f = ||=>void{
        // gc::DioGC__set_eva(true);
        // gc::DioGC__enable_auto_collect();
        println!("begin sleep");
        // gc::DioGC__disable_auto_collect();
        sleep(secs);
        // gc::DioGC__enable_auto_collect();
        println!("end sleep");
        shared_state.completed =true;
        println!("wake");
        if !(shared_state.waker is None){
            (shared_state.waker as Waker!).wake();
        }
        return;
    };
    println!("start a thread");
    // fff = &f;
    // gc::DioGC__disable_auto_collect();
    // gc::DioGC__set_eva(false);
    new_thread(&f);
    let ret = TimerFuture {shared_state: shared_state};
    return &ret;
}

pub struct Task {
    time_future: *TimerFuture;
    sender: *Chan<*Task>;
}

pub struct Spawner {
    sender: *Chan<*Task>;
}

pub struct Executor {
    ready_queue: *Chan<*Task>;
}

fn new_executor_and_spawner() (Executor, Spawner) {
    let ch = &channel<*Task>(10 as u64);
    let executor = Executor{};
    executor.ready_queue = ch;
    let spawner = Spawner{};
    spawner.sender = ch;
    return (executor, spawner);
}

impl Spawner {
    fn spawn(future: *TimerFuture)void{
        let task = Task {};
        task.sender = self.sender;
        task.time_future = future;
        let tw = TimeWaker{};
        tw.task = &task;
        let waker: Waker = tw;
        future.shared_state.waker = waker;
        // self.sender.send(&task);
        return;
    }
}

impl Executor {
    fn run()void{
        let is_pending = true;
        while is_pending {
            let task = *self.ready_queue.recv();
            println!("recved");
            let wk = task.time_future.shared_state.waker;
            let poll = task.time_future.poll(wk as Waker!);
            println!("polled");
            if poll is Pending{
                continue;
            }
            println!("[run]ready");
            is_pending = false;
        }
        return;
    }
}

// async fn foo() void {
//     println!("start");
//     new_tf(3 as u64).await;
//     println!("stop");
//     return;
// }
use std::iter::*;

gen fn generator() Iterator<Option<i64>> {
    for let i = 0; i < 2; i = i + 1 {
        let o: Option<i64> = i;
        yield return o;
    }
}
struct GenFuture<T> {
    it: Iterator<Option<T>>;
}
impl <T>Iterator<T> for GenFuture<T>{
    fn next() Option<T>{
        while true {
            let o = self.it.next();
            if o is None {
                return None{};
            }
            let v = o as Option<T>!;
            if v is T {
                return v;
            }
        }
        return None{};
    }
}
impl <T>Future<T> for GenFuture<T> {
    fn poll(wk: Waker) Poll<T>{
        let t = self.next();// as Option<T>!;
        if t is None {
            return Pending{};
        }
        let v = t as T!;
        
        return Ready<T>{v: v};
    }
}


pub fn test_future() i64 {
    println!("new_timerfuture");
    let tf = new_tf(3 as u64);
    println!("new_executor & spawner");
    let (executor, spawner) = new_executor_and_spawner();
    println!("spawn");
    spawner.spawn(tf);
    println!("run");
    executor.run();
    println!("end");
    return 0;
}