use core::panic;
type A<T> = f32 | T;
type B<T> = i32 | A<T>;
type D = *i32 | f64;
pub fn test_union() i64 {
    let g: Option<i64> = None{};
    panic::assert(g is None);
    g = 1 as i64;
    let a: i128 = 1;
    let b: f32 = 1.0;
    let c: A<i128> = a;
    let h = c as i128?;
    let i = h as i128!;
    panic::assert(i == 1);
    let d = c;
    d = b;
    let e = a as f32;
    e = 100.1;
    let f = e as i64;
    panic::assert(f == 100);
    let aa: B<i128> = d;
    let bb = aa as i32?;
    panic::assert(bb is None);
    let cc = aa as A<i128>!;
    cc.name();
    let dd = cc as f32!;
    panic::assert(dd == 1.0);
    let j = test_ret_union() as i64!;
    panic::assert(j == 101);
    let gg = 1 as i32;
    let ff: D = &gg;
    panic::assert(ff is *i32);
    let hh = ff as *i32!;
    *hh = 101;
    let ii = ff as *i32!;
    panic::assert(*ii == 101);
    return 0;
}

fn test_ret_union() Option<i64> {
    return 101;
}

impl<T> A<T> {
    fn name() void {
        let f = (*self) as f32!;
        f = 100.0;
        return;
    }

}

type Name = i32 | i64;
