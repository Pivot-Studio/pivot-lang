use std::iter::*;
use core::panic::assert;
pub fn test_generator() void {
    let iterator: Iterator<i64> = generator(100, 20);
    let next = iterator.next();
    assert(next is i64);
    let i = next as i64!;
    assert(i == 0);
    next = iterator.next();
    assert(next is i64);
    i = next as i64!;
    assert(i == 1);
    next = iterator.next();
    assert(next is i64);
    i = next as i64!;
    println!(i);
    assert(i == 100);
    next = iterator.next();
    assert(next is i64);
    i = next as i64!;
    assert(i == 101);
    next = iterator.next();
    assert(next is i64);
    i = next as i64!;
    assert(i == 20);
    next = iterator.next();
    assert(next is None);
    next = iterator.next();
    assert(next is None);
    let g = generator1();
    executeGenerator(g);
    return;
}

gen fn generator(b: i64, c: i64) Iterator<i64> {
    for let i = 0; i < 2; i = i + 1 {
        yield return i;
    }
    let a = b;
    yield return a;
    a = a + 1;
    yield return a;
    yield return c;
}


var effect1 = 1;
var effect2 = 2;
var eff_ret = 10086;

gen fn generator1() Iterator<(i64, |*||=>void,*||=>void| =>void)> {
    let retgen2 = 0;
    let generator = generator2();
    while true {
        let nx = generator.next();
        if nx is None {
            break;
        }
        let nx_v = nx as (i64, |*||=>void,*||=>void| =>void)!;
        match nx_v {
            (10086, f) => {
                let wrapped_f = |iter:*||=>void,handler:*||=>void| => {
                    let real_handler = unsafe_cast<|||=>void|=>void>(handler);
                    let ret_handler = |resolve:||=>void, ret|=>{
                        retgen2 = ret;
                        (*real_handler)(resolve);
                        return;
                    };
                    let clp = &ret_handler;
                    let arg2 = unsafe_cast<||=>void>(clp);
                    f(iter,arg2);

                    return;
                };
                let yr= (eff_ret,wrapped_f);
                yield return yr;
                break;
            }
            yr => {
                yield return yr;
            }
        }
    }

    println!("got retgen2 ", retgen2);


    // executeGenerator(generator2());
    let a = retgen2;
    let re = 0;

    let f = |next:*||=>void,handler:*||=>void| => {
        let real_handler = unsafe_cast<||i64|=>void,i64|=>void>(handler);
        let resolve = |ret|=> {
            re = ret;
            (*next)();
            return;
        };
        (*real_handler)(resolve,a);

        return;
    };
    let yr= (effect1,f);
    yield return yr;
    println!("got re ", re);
}


gen fn generator2() Iterator<(i64, |*||=>void,*||=>void| =>void)> {
    // executeGenerator(generator2());
    let a = 1;
    let re = 0;

    let f = |next:*||=>void,handler:*||=>void| => {
        let real_handler = unsafe_cast<||i64|=>void,i64|=>void>(handler);
        let resolve = |ret|=> {
            re = ret;
            (*next)();
            return;
        };
        (*real_handler)(resolve,a);

        return;
    };
    let yr= (effect1,f);
    yield return yr;
    println!("g2 got re ", re);

    f = |next:*||=>void,handler:*||=>void| => {
        let real_handler = unsafe_cast<|||=>void,i64|=>void>(handler);
        let resolve = ||=> {
            (*next)();
            return;
        };
        (*real_handler)(resolve,100);

        return;
    };
    // return
    yr= (eff_ret,f);
    yield return yr;
}


fn executeGenerator(g:Iterator<(i64, |*||=>void,*||=>void| =>void)>) void {
    let eff = g.next();
    if eff is None {
        println!("ret none");
        return;
    }
    match eff as (i64, |*||=>void,*||=>void| =>void)! {
        (1,r) => {
            println!("handle eff1");
            let cl =|resolve, a| => {
                eff1handler(resolve, a);
                return;
            };
            let next = & ||=>{
                executeGenerator(g);
                return;
            };
            let clp = &cl;
            let arg2 = unsafe_cast<||=>void>(clp);
            r(next,arg2);
        }
        (2,r) => {
            println!("handle eff2");
        }
        (10086,r) => {
            println!("handle effret");
            let cl =|resolve:||=>void| => {
                resolve();
                return;
            };
            let next = & ||=>{
                executeGenerator(g);
                return;
            };
            let clp = &cl;
            let arg2 = unsafe_cast<||=>void>(clp);
            r(next,arg2);
        }
        (n, f) => {
            println!("handle eff", n);
        }
    }
    return;
}


fn eff1handler(resolve: |i64|=>void,a:i64) void {
    println!("effect 1, ", a);
    resolve(a+1);
    return;
}


fn eff2handler(resolve: ||=>void) void {
    println!("effect 2");
    resolve();
    return;
}

