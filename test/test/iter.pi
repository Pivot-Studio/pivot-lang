use std::iter::*;
use core::panic::assert;
pub fn test_generator() void {
    let iterator: Iterator<i64> = generator(100, 20);
    let next = iterator.next();
    assert(next is i64);
    let i = next as i64!;
    assert(i == 0);
    next = iterator.next();
    assert(next is i64);
    i = next as i64!;
    assert(i == 1);
    next = iterator.next();
    assert(next is i64);
    i = next as i64!;
    println!(i);
    assert(i == 100);
    next = iterator.next();
    assert(next is i64);
    i = next as i64!;
    assert(i == 101);
    next = iterator.next();
    assert(next is i64);
    i = next as i64!;
    assert(i == 20);
    next = iterator.next();
    assert(next is None);
    next = iterator.next();
    assert(next is None);
    let g = generator1();
    executeGenerator(g);
    return;
}

gen fn generator(b: i64, c: i64) Iterator<i64> {
    for let i = 0; i < 2; i = i + 1 {
        yield return i;
    }
    let a = b;
    yield return a;
    a = a + 1;
    yield return a;
    yield return c;
}


var effect1 = 1;
var effect2 = 2;

gen fn generator1() Iterator<i64> {
    executeGenerator(generator2());
    yield return effect1;
}

gen fn generator2() Iterator<i64> {
    yield return effect2;
}


fn eff1handler(resolve: ||=>void) void {
    println!("effect 1");
    resolve();
    return;
}
fn eff2handler(resolve: ||=>void) void {
    println!("effect 2");
    resolve();
    return;
}


fn executeGenerator(g:Iterator<i64>) void {
    let eff = g.next();
    let resolve = || => {
        executeGenerator(g);
        return;
    };
    match eff {
        i64(1) => {
            eff1handler(resolve);
        }
        i64(2) => {
            eff2handler(resolve);
        }
        _ => {
        }
    }
    return;
}

