use core::panic;
const a = 100;
pub fn true_with_pnanic() bool {
    panic::pl_panic();
    return true;
}

pub struct complex_struct {
    x: i64;
    pub y: *bool;
    pub z: [base * 2];
}

/// struct coment
struct base {
}

/// fn coment
/// fn coment
fn struct_init() void {
    /// comment
    let t = complex_struct{
        x: 1,
        y: &true,
        z: [base{}, base{}]
    };
    t.z[1];
    return;
}

fn ifel() void {
    if true {
    } else {
        if true {
        }
    }
    if true {
    }
    return;
}

pub struct A {
    x: i64;
}

impl TestTrait for A {
    fn name() void {
        return;
    }

    fn set(i: i64) i64 {
        self.x = i;
        return i;
    }

}

pub trait TestTrait {
    fn name() void;

    fn set(i: i64) i64;

}

pub fn trait_with_generic<T>(x: T) i64
where
    T: TestTrait
{
    x.name();
    return x.set(999);
}

pub fn trait_with_generic_ret<T|S>(x: T, y: S) T
where
    T: TestTrait,
    S: TestTrait
{
    x.name();
    y.name();
    return x;
}

pub fn flow() void {
    let x = (false && true_with_pnanic()) || (true || !true_with_pnanic());
    if (true || true_with_pnanic()) && (false && !true_with_pnanic() || x) {
    } else {
        panic::pl_panic();
    }
    let z = 100;
    for let i = 10; i < 15 && (i > 100 || true); i = i + 1 {
        z = z + 1;
    }
    let i = 0;
    while i > 100 || (i < 5 && i <= 6) {
        i = i + 1;
    }
    return;
}

pub fn generic_fn<A|B|C>(a: i64, x: A, y: B, z: C) i64 {
    if a == 0 {
        return 0;
    }
    if a == 1 {
        return 1;
    }
    if a == 2 {
        return 1;
    }
    return generic_fn<B|_|C>(a - 1, y, x, z) + generic_fn<C|A|_>(a - 2, z, x, y);
}

struct Point<X|Y> {
    x: X;
    y: Y;
}

impl<X1|Y1> Point<X1|Y1> {
    fn mixup<X2|Y2>(other: Point<X2|Y2>) Point<X1|Y2> {
        return Point{
            x: self.x,
            y: other.y
        };
    }

}

struct StWithTrait<T: TestTrait> {
    x: Inner<T>;
}

impl<J: TestTrait> StWithTrait<J> {
    fn call_trait() void {
        self.x.y.name();
        return;
    }

}

struct Inner<T: TestTrait> {
    y: T;
}

type AA<T> = f32 | T;
type B<T> = i32 | AA<T>;
pub fn test_union() i64 {
    let g: Option<i64> = None{};
    panic::assert(g is None);
    g = 1 as i64;
    let a: i128 = 1;
    let b: f32 = 1.0;
    let c: AA<i128> = a;
    let h = c as i128?;
    let i = h as i128!;
    panic::assert(i == 1);
    let d = c;
    d = b;
    let e = a as f32;
    e = 100.1;
    let f = e as i64;
    let aa: B<i128> = d;
    let bb = aa as i32?;
    panic::assert(bb is None);
    let cc = aa as AA<i128>!;
    let dd = cc as f32!;
    panic::assert(dd == 1.0);
    let j = test_ret_union() as i64!;
    panic::assert(j == 101);
    return 0;
}

fn test_ret_union() Option<i64> {
    return 101;
}

trait TA {
}

trait TB {
}

trait TC: TA+TB {
}

trait TD: TA {
}

fn fn_as_param(f: |i64, i64| => i64) |i64, i64| => i64 {
    panic::assert(f(1, 2) == 3);
    return f;
}

fn add(i: i64, j: i64) i64 {
    return i + j;
}

pub fn test_fntype() || => f {
    let f = add;
    let fc: |i64, i64| => i64 = f;
    let re = fn_as_param(fc)(2, 2);
    panic::assert(re == 4);
    let ff: || => f = test_ret_f;
    let f1 = test_ret_f().f(100, 2);
    panic::assert(f1 == 102);
    return ff;
}

fn test_ret_f() f {
    let d: |i64, i64| => i64 = add;
    return f{
        f: d
    };
}

pub struct f {
    f: |i64, i64| => i64;
}

pub fn test_closure() i64 {
    let b = 1;
    let bb = 100;
    test_type_infer(|a| => {
        let c = b;
        let aa = |a: i64| => i64 {
            let c = bb;
            return c;
        };
        let re = aa(2);
        panic::assert(re == 100);
        return c;
    });
    let f = test_ret_closure();
    let d = f(2);
    panic::assert(d == 1);
    return 0;
}

fn test_type_infer(f: |i64| => i64) void {
    return;
}

fn test_ret_closure() |i64| => i64 {
    let b = 1;
    let bb = 100;
    let a = |a: i64| => i64 {
        let c = b;
        let aa = |a: i64| => i64 {
            let c = bb;
            return c;
        };
        let re = aa(2);
        panic::assert(re == 100);
        return c;
    };
    return a;
}

pub fn test_tuple() void {
    let d: () = ();
    let a = (1,);
    // tuple
    let g = (1);
    // i64
    let b = (1, 2);
    let c: (i64, i64, (i64)) = (1, 2, (3,));
    let e = a.0;
    let f = c.2;
    panic::assert(f.0 == 3);
    return;
}

struct DecTest {
    aa: bool;
    bb: i128;
    cc: (i64, i64);
    dd: *DecTest;
}

pub fn test_deconstruct() void {
    let (a, (b, c)) = (1, (2, 3));
    let d = a + b + c;
    panic::assert(d == 1 + 2 + 3);
    let complex = DecTest{
        aa: true,
        bb: 123 as i128,
        cc: (1, 2),
        dd: &DecTest{
            aa: true,
            bb: 123 as i128,
            cc: (1, 2)
        }
    };
    let ({aa, bb, cc: (cc1, cc2), dd}, e) = (complex, 100);
    panic::assert(cc1 + cc2 + e == 1 + 2 + 100);
    return;
}

use std::iter::*;
use core::panic::assert;
pub fn test_generator() void {
    let iterator: Iterator<i64> = generator(100, 20);
    let next = iterator.next();
    assert(next is i64);
    let i = next as i64!;
    assert(i == 0);
    next = iterator.next();
    assert(next is i64);
    i = next as i64!;
    assert(i == 1);
    next = iterator.next();
    assert(next is i64);
    i = next as i64!;
    assert(i == 100);
    next = iterator.next();
    assert(next is i64);
    i = next as i64!;
    assert(i == 101);
    next = iterator.next();
    assert(next is i64);
    i = next as i64!;
    assert(i == 20);
    next = iterator.next();
    assert(next is None);
    next = iterator.next();
    assert(next is None);
    return;
}

gen fn generator(b: i64, c: i64) Iterator<i64> {
    for let i = 0; i < 2; i = i + 1 {
        yield return i;
    }
    let a = b;
    yield return a;
    a = a + 1;
    yield return a;
    yield return c;
}

