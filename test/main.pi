use core::coro::*;
use core::process;
use core::coro::Coroutine;
use project1::test::global;
use std::thread;
use core::panic;

pub fn main() i64 {
    let c1 = new_coro(||=> {
        coro_sleep(3 as u64);
        let a = 1;
        println!("sleep done c1");
        go(||=> {
            coro_sleep(3 as u64);
            println!("should be seen at last");
            process::exit_now(0);
            return;
        });
        coro__yield();
        return;
    });
    let c2 = new_coro(||=> {
        coro_sleep(3 as u64);
        println!("sleep done c2");
        go(||=> {
            coro_sleep(2 as u64);
            println!("should be seen before exit 2");
            coro__yield();
            return;
        });
        go(||=> {
            coro_sleep(1 as u64);
            println!("should be seen before exit 1");
            coro__yield();
            return;
        });

        coro__yield();
        return;
    });
    sched_coro(c1);
    sched_coro(c2);
    start_sched_loop();
    // let a = 1;
    // thread::spawn(||=>{
    //     while true {
    //         let b = 0;
    //         if a != 1 {
    //             panic::pl_panic();
    //         }
    //     }
    //     return;
    // });
    // thread::spawn(||=>{
    //     while true {
    //         let b = 0;
    //         if a != 1 {
    //             panic::pl_panic();
    //         }
    //     }
    //     return;
    // });
    // while true {
    //     let b = 0;
    //     if a != 1 {
    //         panic::pl_panic();
    //     }
    // }
    
    return 0;
}






