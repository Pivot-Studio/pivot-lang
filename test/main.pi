use project1::test::ifel;
use project1::test::generic;
use project1::test::st;
use project1::test::method;
use project1::test::constant;
use project1::test::traits;
use project1::test::simple;
use project1::test::flow;
use project1::test::list;
use project1::test::module;
use project1::test::string;
use project1::test::macros;
use pl_test::main;
use std::io;
type A<T> = f32|T;
pub fn test_union() i64 {
    let g : Option<i64> = None{};
    g = 1 as i64;
    let a: i128 = 1;
    let b: f32 = 1.0;
    let c: A<i128> = a;
    let h = c as i128?;
    let i = h as i128!;
    let d = c;
    d = b;
    let e = a as f32;
    e = 100.1;
    let f = e as i64;
    io::printi64ln(f);
    return 0;
}

pub fn name() Option<i64> {
    let a  = 1;
    return a;
}

pub fn main() i64 {
    macros::test_macros();
    ifel::test_if_else();
    generic::test_generic();
    method::test_impl();
    st::test_struct();
    constant::test_const();
    traits::test_trait();
    simple::test_simple();
    flow::test_flow();
    list::test_list();
    main::simple_test();
    module::test_module();
    string::test_string();
    test_union();
    return 0;
}

