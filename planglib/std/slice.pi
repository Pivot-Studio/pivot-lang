pub trait SliceExt<T> {
    fn index_of(sub_arr:[T]) Option<i64>;
    fn index_of_kmp(sub_arr:[T]) Option<i64>;
    fn len() i64;
    fn slice(start: i64, end: i64) [T];
    fn copy(to:[T], len:i64) Result<()|SliceOutOfIdxErr>;
}

pub struct SliceOutOfIdxErr {
    
}


fn arr_next<T:Eq<T>>(arr:[T]) [i64] {
    let len = arr.len();
    let next = [0* len];
    next[0] = -1;
    let i = 0;
    let j = -1;
    while i < len - 1 {
        if j == -1 || arr[i].eq(&arr[j]) {
            i = i + 1;
            j = j + 1;
            next[i] = j;
        } else {
            j = next[j];
        }
    }
    return next;
}

use core::eq::Eq;
impl<T:Eq<T>> SliceExt<T> for [T] {
    /// # index_of
    ///
    /// Find the index of the first occurrence of a sub array in the array.
    fn index_of(sub_arr:[T])  Option<i64> {
        let len = self.len();
        let sub_len = sub_arr.len();

        // Calculate the expected cost of both algorithms
        let cost_index_of = len * sub_len/2;
        let cost_index_of_kmp = len + sub_len;

        // Choose the algorithm with the lower expected cost
        if cost_index_of_kmp < cost_index_of {
            return self.index_of_kmp(sub_arr);
        }



        if sub_len > len || sub_len == 0{
            return None{};
        }
        let i = 0;
        while i < len - sub_len + 1 {
            let j = 0;
            while j < sub_len {
                if !(*self)[i+j].eq(&sub_arr[j]) {
                    break;
                }
                j = j + 1;
            }
            if j == sub_len {
                return i;
            }
            i = i + 1;
        }
        return None{};

    }


    fn index_of_kmp(sub_arr:[T]) Option<i64> {
        let len = self.len();
        let sub_len = sub_arr.len();
        if sub_len > len || sub_len == 0{
            return None{};
        }
        let next = arr_next(sub_arr);
        let i = 0;
        let j = 0;
        while i < len {
            if j == -1 || (*self)[i].eq(&sub_arr[j]) {
                i = i + 1;
                j = j + 1;
            } else {
                j = next[j];
            }
            if j == sub_len {
                return i - sub_len;
            }
        }
        return None{};
    }
    

    /// # len
    ///
    /// Get the length of the array.
    fn len() i64 {
        return arr_len(*self) ;
    }

    /// # slice
    ///
    /// Get a slice of the array.
    fn slice(start: i64, len: i64) [T] {
        return arr_slice(*self, start, len);
    }

    /// # copy
    ///
    /// Copy the array to another array.
    fn copy(to:[T], len:i64) Result<()|SliceOutOfIdxErr> {
        let from = *self;
        if from.len() < len || to.len() < len {
            return SliceOutOfIdxErr{} as Result<()|SliceOutOfIdxErr>;
        }
        arr_copy(from, to, len);
        return ();
    }
}

