use std::task::Task;
use std::task::tcp;
use std::task::dns;
use std::string::StringBuilder;
use std::string::StringExt;
use std::cols::arr;

pub struct HttpResponse {
    status_code: i32;
    headers: string;
    socket: tcp::TCPSocket;
    body_read: bool;
    cached_body: arr::Array<u8>; // 新增:缓存已读取的body内容
}

pub struct HttpClient {
    socket: tcp::TCPSocket;
}

pub fn new_http_client() HttpClient {
    return HttpClient{
        socket: tcp::new_tcp_socket(),
    };
}

use std::io;
impl HttpClient {
    pub async fn get_async(url: string) Task<HttpResponse> {
        // 构建HTTP GET请求
        let sb = StringBuilder{
            data: [u8*1024;],
            len: 0,
        };
        let domain = url.split("://")[1].split("/")[0];

        sb.add_str("GET / HTTP/1.1\r\n");
        sb.add_str("Host: ");
        sb.add_str(domain);
        sb.add_str("\r\n");
        sb.add_str("Connection: close\r\n\r\n");
        
        let request = sb.str();
        let bytes = request.bytes();
        let resolver = dns::new_dns_resolver();
        let ip = await resolver.resolve_async(domain);
        let status = await self.socket.connect_async(ip, 80 as i32);
        // 发送请求
        await self.socket.write_async(bytes);
        
        // 使用1k缓冲区读取header
        let response_buf = [u8*1024;];
        let  total_read = 0;
        let header_end = -1;
        
        while header_end == -1 {
            let read_len = await self.socket.read_async(response_buf);
            if read_len == 0 {
                break;
            }
            
            // 查找header结束位置
            for let i = 0; i < read_len - 3; i = i + 1 {
                if response_buf[i] as char == '\r' && 
                    response_buf[i+1] as char == '\n' && 
                    response_buf[i+2] as char == '\r' && 
                    response_buf[i+3] as char == '\n' {
                    header_end = total_read + i;
                    break;
                }
            }
            total_read = total_read + read_len;
        }
        
        let headers = string_from_bytes(arr_slice(response_buf, 0, header_end));
        
        // 缓存已读取的body内容
        let body_start = header_end + 4;
        let cached_body = arr::from_slice<u8>(arr_slice(response_buf, body_start, total_read - body_start));
        
        // 解析状态码
        let status_str = string_from_bytes(arr_slice(response_buf, 9, 12));
        
        // TODO: 解析状态码
        return HttpResponse{
            status_code: 200 as i32,
            headers: headers,
            socket: self.socket,
            body_read: false,
            cached_body: cached_body,
        };
    }
}

use std::math::*;
use std::slice::SliceExt;

impl HttpResponse {
    
    pub async fn read_async(buf: [u8]) Task<Option<i64>> {
        if self.body_read {
            return None{} as Option<i64>;
        }
        // 先读取缓存的body内容
        if self.cached_body.length() > 0 {
            let copy_len = min(buf.len(), self.cached_body.length() as i64);
            arr_copy(self.cached_body.get_slice(), buf, copy_len);
            self.cached_body = arr::from_slice(arr_slice(self.cached_body.get_slice(), copy_len, self.cached_body.length() as i64 - copy_len));
            return copy_len as Option<i64>;
        }
        // 继续从socket读取
        let n = await self.socket.read_async(buf);
        if n == 0 {
            self.body_read = true;
        }
        return n as Option<i64>;
    }

    pub async fn read_all_async() Task<[u8]> {
        let content = arr::new<u8>();
        let buf = [u8*4096;];
        while let n = (await self.read_async(buf)) as i64 {
            content.append(arr::from_slice(buf.slice(0, n)));
        }
        return content.get_slice();
    }
}
