use std::libuv;
use std::chan;
use std::task::Task;
use std::task::executor;
use std::slice::SliceExt;


struct UVReactor {
    async_t: *libuv::uv_async_t;
    idle_t: *libuv::uv_idle_t;
    loop: *libuv::uv_loop_t;
    ch: *chan::Chan<EV>;
}


struct WriteEV {
    handle: *libuv::uv_stream_t;
    buf: [u8];
    write_cb: |i32|=>void;
}


struct StopEV {
    
}


type EV = TCPListenEV | TimerEV | StreamReadEV | ReadStopEV | WriteEV | StopEV | UDPRecvEV | UDPSendEV;




struct TimerEV {
    wake: ||=>void;
    timeout_ms: u64;
    repeat_ms: u64;
}

struct ReadStopEV {
    handle: *libuv::uv_stream_t;
}

struct TCPListenEV {
    handle: *libuv::uv_tcp_t;
    addr: libuv::sockaddr_in;
    on_connect: |*libuv::uv_tcp_t|=>Task<()>;

}

struct StreamReadEV {
    read_cb: |i64|=>void;
    handle: *libuv::uv_stream_t;
    total_read: i64;
    buf: [u8];
}

struct UDPRecvEV {
    handle: *libuv::uv_udp_t;
    buf: [u8];
    read_cb: |i64|=>void;
    total_read: i64;
}

struct UDPSendEV {
    handle: *libuv::uv_udp_t; 
    buf: [u8];
    write_cb: |i32|=>void;
    addr: libuv::sockaddr_in;
}

var GLOBAL_REACTOR = new_uv_reactor();



fn timer_cb(timer:*libuv::uv_timer_t) void {
    let ev = libuv::get_data_for_handle<libuv::uv_timer_t|TimerEV>(timer);
    ev.wake();
    let cb = unsafe_cast<()>(&close_cb);
    let handle = unsafe_cast<()>(timer);
    libuv::uv_close(handle,cb);
    return;
}

fn close_cb(handle:*()) void {
    gc::rm_alive_pinned(handle);
    return;
}


fn conn_cb(server:*libuv::uv_stream_t, _status:u32) void {
    let client = libuv::new_uv_tcp_t();
    libuv::uv_tcp_init(GLOBAL_REACTOR.loop, unsafe_cast<libuv::uv_tcp_t>(client));
    libuv::uv_accept(server, unsafe_cast<libuv::uv_stream_t>(client));
    let on_conn = libuv::get_data_for_handle_raw<libuv::uv_stream_t||*libuv::uv_tcp_t|=>Task<()>>(server);
    let tk = (*on_conn)(client);
    executor::GLOBAL_EXECUTOR.spawn(tk);
    return;
}

fn alloc_cb(handle:*(), _suggested_size:i64, buf:*libuv::uv_buf_t) void {
    let ev = libuv::get_data_for_handle<_| StreamReadEV>(handle);
    let ptr = &ev.buf[ev.total_read];
    let l = ev.buf.len() - ev.total_read;
    if l<=0 {
        l = 0;
    }
    * buf = libuv::uv_buf_init(ptr, l as u32);

    return;
}

fn read_cb(stream:*libuv::uv_stream_t, nread:i64, _buf:*libuv::uv_buf_t) void {

    let ev = libuv::get_data_for_handle<libuv::uv_stream_t|StreamReadEV>(stream);
    ev.total_read = nread + ev.total_read;
    ev.read_cb(nread);
    return;
}


fn write_cb(req:*libuv::uv_write_t, status:i32) void {
    let ev = libuv::get_data_for_handle<libuv::uv_write_t|WriteEV>(req);
    ev.write_cb(status);
    
    return;
}

use std::io;

fn async_cb(async_t:*libuv::uv_async_t) void {
    let reactor = libuv::get_data_for_handle<libuv::uv_async_t|UVReactor>(async_t);
    let ch = reactor.ch;
    let evs = ch.recv_all();
    for let i = 0; i < arr_len(evs); i = i + 1 {
        let ev = evs[i];
        match ev {
            TimerEV(ev) => {
                let timer = libuv::new_uv_timer_t();
                gc::keep_alive_pinned(timer);
                let cb = unsafe_cast<()>(&timer_cb);
                gc::keep_alive_pinned(cb);
                libuv::uv_timer_init(libuv::uv_default_loop(), timer);
                libuv::set_data_for_handle(timer, &ev);
                libuv::uv_timer_start(timer, cb, ev.timeout_ms, ev.repeat_ms);

            }
            TCPListenEV(ev) => {
                gc::keep_alive_pinned(ev.handle);
                libuv::uv_tcp_init(reactor.loop, ev.handle);
                libuv::uv_tcp_bind(ev.handle, &ev.addr, 0 as u32);
                libuv::set_data_for_handle(ev.handle, &ev.on_connect);
                let cb = unsafe_cast<()>(&conn_cb);
                
                libuv::uv_listen(unsafe_cast<libuv::uv_stream_t>(ev.handle), 128 as i32, cb);
                

            }
            StreamReadEV(ev) => {
                gc::keep_alive_pinned(ev.handle);
                let cb = unsafe_cast<()>(&read_cb);
                let alloc_cb = unsafe_cast<()>(&alloc_cb);
                libuv::uv_read_start(ev.handle, alloc_cb, cb);
                libuv::set_data_for_handle(ev.handle, &ev);

            }
            ReadStopEV(ev) => {
                libuv::uv_read_stop(ev.handle);
            }
            WriteEV(ev) => {
                let req = libuv::new_uv_write_t();
                gc::keep_alive_pinned(req);

                let raw_slice_p = &ev.buf[0];
                gc::pin(raw_slice_p);
                let buf = libuv::uv_buf_init(&ev.buf[0], ev.buf.len() as u32);
                let buf_p = &buf;
                gc::pin(buf_p);
                libuv::set_data_for_handle(req, &ev);
                
                let cb = unsafe_cast<()>(&write_cb);
                libuv::uv_write(req, ev.handle, &buf, 1 as u32, cb);
                libuv::set_data_for_handle(req, &ev);
            }
            StopEV(ev) => {
                libuv::uv_stop(reactor.loop);
                libuv::uv_loop_close(GLOBAL_REACTOR.loop);
            }
            UDPRecvEV(ev) => {
                gc::keep_alive_pinned(ev.handle);
                let cb = unsafe_cast<()>(&udp_recv_cb);
                let alloc_cb = unsafe_cast<()>(&udp_alloc_cb);
                libuv::uv_udp_recv_start(ev.handle, alloc_cb, cb);
                libuv::set_data_for_handle(ev.handle, &ev);
            }
            UDPSendEV(ev) => {
                let req = libuv::new_uv_write_t();
                gc::keep_alive_pinned(req);
                let raw_slice_p = &ev.buf[0];
                gc::pin(raw_slice_p);
                let buf = libuv::uv_buf_init(&ev.buf[0], ev.buf.len() as u32);
                let buf_p = &buf;
                gc::pin(buf_p);
                libuv::set_data_for_handle(req, &ev);
                let cb = unsafe_cast<()>(&udp_send_cb);
                libuv::uv_udp_send(req, ev.handle, &buf, 1 as u32, &ev.addr, cb);
            }
            _ => {
            }
        }
    }

    return;
}

fn idle_cb(_idle: *libuv::uv_idle_t) void {
    gc::DioGC__safepoint(asm_sp());
    return;
}


pub fn new_uv_reactor() *UVReactor {
    let loop = libuv::uv_default_loop();
    let async_t = libuv::new_uv_async_t();
    let cb = unsafe_cast<()>(&async_cb);
    let idle_t = libuv::new_uv_idle_t();
    gc::pin(idle_t);
    gc::keep_alive_pinned(idle_t);
    gc::pin(async_t);
    gc::keep_alive_pinned(async_t);
    let idle_cb = unsafe_cast<()>(&idle_cb);
    libuv::uv_idle_init(loop, idle_t);
    libuv::uv_idle_start(idle_t, idle_cb);
    libuv::uv_async_init(loop, async_t, cb);
    let ch = &chan::channel<|EV|=>void>(10 as u64);
    gc::pin(ch);
    let reactor = &UVReactor{
        async_t: async_t,
        idle_t: idle_t,
        loop: loop,
        ch: ch,
    };
    gc::pin(reactor);
    libuv::set_data_for_handle(async_t, reactor);
    return reactor;
}


impl UVReactor {
    pub fn start_ev_loop() void {
        libuv::uv_run(self.loop, libuv::UV_RUN_DEFAULT);
        return;
    }


    pub fn add_timer(timeout_ms: u64, repeat_ms: u64, wake: ||=>void) void {
        let ev = TimerEV{
            wake: wake,
            timeout_ms: timeout_ms,
            repeat_ms: repeat_ms,
        };
        let e = ev as EV;
        self.ch.send(e);
        libuv::uv_async_send(self.async_t);
        return;
    }

    pub fn new_tcp_listener(tcp_h:*libuv::uv_tcp_t, ip:string, port:i32, on_conn:|*libuv::uv_tcp_t|=>Task<()>) void {
        let addr = libuv::sockaddr_in{};
        libuv::uv_ip4_addr(ip.cstr(), port, &addr);
        let ev = TCPListenEV{
            handle: tcp_h,
            addr: addr,
            on_connect: on_conn,
        };
        let e = ev as EV;
        self.ch.send(e);
        libuv::uv_async_send(self.async_t);
        return;
    }


    pub fn new_stream_read(stream:*libuv::uv_stream_t, buf:[u8], readcb:|i64|=>void) void {
        let ev = StreamReadEV{
            handle: stream,
            read_cb: readcb,
            buf:buf,
        };
        let e = ev as EV;
        self.ch.send(e);
        libuv::uv_async_send(self.async_t);
        return;
    }

    pub fn stream_read_stop(stream:*libuv::uv_stream_t) void {
        let ev = ReadStopEV{
            handle: stream,
        };
        let e = ev as EV;
        self.ch.send(e);
        libuv::uv_async_send(self.async_t);
        return;
    }

    pub fn stream_write(stream:*libuv::uv_stream_t,buf:[u8], writecb:|i32|=>void) void {
        let ev = WriteEV{
            handle: stream,
            buf: buf,
            write_cb: writecb,
        };
        let e = ev as EV;

        self.ch.send(e);
        libuv::uv_async_send(self.async_t);
        return;
    }

    pub fn stop() void {
        let ev = StopEV{};
        let e = ev as EV;
        self.ch.send(e);
        libuv::uv_async_send(self.async_t);
        return;
    }
    
    pub fn new_udp_socket(udp_h:*libuv::uv_udp_t, ip:string, port:i32) void {
        let addr = libuv::sockaddr_in{};
        libuv::uv_ip4_addr(ip.cstr(), port, &addr);
        libuv::uv_udp_init(self.loop, udp_h);
        libuv::uv_udp_bind(udp_h, &addr, 0 as u32);
        return;
    }

    pub fn udp_recv(udp:*libuv::uv_udp_t, buf:[u8], readcb:|i64|=>void) void {
        let ev = UDPRecvEV{
            handle: udp,
            buf: buf,
            read_cb: readcb,
            total_read: 0,
        };
        let e = ev as EV;
        self.ch.send(e);
        libuv::uv_async_send(self.async_t);
        return;
    }

    pub fn udp_send(udp:*libuv::uv_udp_t, buf:[u8], ip:string, port:i32, writecb:|i32|=>void) void {
        let addr = libuv::sockaddr_in{};
        libuv::uv_ip4_addr(ip.cstr(), port, &addr);
        let ev = UDPSendEV{
            handle: udp,
            buf: buf, 
            write_cb: writecb,
            addr: addr,
        };
        let e = ev as EV;
        self.ch.send(e);
        libuv::uv_async_send(self.async_t);
        return;
    }
}




pub fn start_global_reactor() void {
    GLOBAL_REACTOR.start_ev_loop();
    return;
}

pub fn stop_global_reactor() void {
    GLOBAL_REACTOR.stop();
    return;
}

fn udp_recv_cb(handle:*libuv::uv_udp_t, nread:i64, _buf:*libuv::uv_buf_t) void {
    let ev = libuv::get_data_for_handle<libuv::uv_udp_t|UDPRecvEV>(handle);
    ev.total_read = nread + ev.total_read;
    ev.read_cb(nread);
    return;
}

fn udp_send_cb(req:*libuv::uv_write_t, status:i32) void {
    let ev = libuv::get_data_for_handle<libuv::uv_write_t|UDPSendEV>(req);
    ev.write_cb(status);
    return;
}

fn udp_alloc_cb(handle:*(), _suggested_size:i64, buf:*libuv::uv_buf_t) void {
    let ev = libuv::get_data_for_handle<_|UDPRecvEV>(handle);
    let ptr = &ev.buf[ev.total_read];
    let l = ev.buf.len() - ev.total_read;
    if l<=0 {
        l = 0;
    }
    * buf = libuv::uv_buf_init(ptr, l as u32);
    return;
}
