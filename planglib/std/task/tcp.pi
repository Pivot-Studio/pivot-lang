use std::task::Task;
use std::task::reactor;
use std::task::executor;
use std::libuv;
use std::slice::SliceExt;

use std::io;

pub struct TCPServer {
}

pub struct TCPSocket {
    handle:*libuv::uv_tcp_t;
}

pub fn new_tcp_socket() TCPSocket {
    let handle = libuv::new_uv_tcp_t();
    reactor::GLOBAL_REACTOR.tcp_init(handle);
    return TCPSocket{
        handle: handle,
    };
}

impl TCPSocket {
    pub fn connect_async(ip:string, port:i32) Task<i32> {
        
        let connect_task = ConnectTask{
            first: true,
            ready: false,
            handle: self.handle,
            status: 0 as i32,
            ip: ip,
            port: port,
        };
        return connect_task as Task<i32>;
    }

    pub fn read_async(buf:[u8]) Task<i64> {
        // pin the buffer
        let buf_ptr = &buf[0];
        gc::pin(buf_ptr);
        let read_task = ReadTask{
            first:true,
            ready:false,
            handle: unsafe_cast<libuv::uv_stream_t>(self.handle),
            read_len:0,
            buf:buf,
        };

        return read_task as Task<i64>;
    }

    pub fn write_async(buf:[u8]) Task<i32> {
        let write_task = WriteTask{
            first:true,
            ready:false,
            handle: unsafe_cast<libuv::uv_stream_t>(self.handle),
            buf:buf,
            status:0 as i32,
        };
        return write_task as Task<i32>;
    }
}

struct ConnectTask {
    first: bool;
    ready: bool;
    handle: *libuv::uv_tcp_t;
    status: i32;
    ip: string;
    port: i32;
}

impl Task<i32> for ConnectTask {
    fn poll(wk:||=>void) Option<i32> {
        if self.first {
            self.first = false;
            let connect_cb = |status| => {
                if self.ready {
                    return;
                }
                self.status = status;
                self.ready = true;
                wk();
                return;
            };
            reactor::GLOBAL_REACTOR.tcp_connect(self.handle, self.ip, self.port, connect_cb);
        }

        if self.ready {
            return self.status as Option<i32>;
        }
        return None{} as Option<i32>;
    }
}

struct WriteTask {
    first:bool;
    ready:bool;
    handle:*libuv::uv_stream_t;
    buf: [u8];
    status:i32;
}


impl Task<i32> for WriteTask {
    fn poll(wk:||=>void) Option<i32> {
        if self.first {
            self.first = false;
            let write_cb = |status| => {
                if self.ready {
                    return;
                }
                self.status = status;
                self.ready = true;
                wk();
                return;
            };
            reactor::GLOBAL_REACTOR.stream_write(self.handle, self.buf, write_cb);
        }

        if self.ready {
            return self.status as Option<i32>;
        }
        return None{} as Option<i32>;
    }
}

struct ReadTask {
    first:bool;
    ready:bool;
    handle:*libuv::uv_stream_t;
    read_len:i64;
    buf: [u8];
}


impl Task<i64> for ReadTask {
    fn poll(wk:||=>void) Option<i64> {
        if self.first {
            self.first = false;
            let read_cb = |nread| => {
                if self.ready {
                    return;
                }
                if nread<0 {
                    // error
                    self.ready = true;
                    wk();
                    return;
                }
                self.read_len = nread + self.read_len;
                if self.read_len >= self.buf.len() {
                    self.ready = true;
                    wk();
                    libuv::uv_read_stop(self.handle);
                }
                return;
            };
            reactor::GLOBAL_REACTOR.new_stream_read(self.handle, self.buf, read_cb);
            
        }
        if self.ready {
            return self.read_len as Option<i64>;
        }
        return None{} as Option<i64>;
    }
}
