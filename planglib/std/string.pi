use std::slice::SliceExt;
use core::panic::pl_panic;

pub trait StringExt {
    fn index_of(s:string) Option<i64>;
    fn contains(s:string) bool;
    fn slice(start:i64, len:i64) string;
}


impl StringExt for string {
    /// # index_of
    ///
    /// Returns the index of the first occurrence of the
    /// specified substring in this string, or `None` if there is no such occurrence.
    fn index_of(s:string) Option<i64> {
        let chars = self.chars();
        let subchars = s.chars();
        return chars.index_of(subchars);
    }
    /// # contains
    ///
    /// Returns `true` if the specified substring is a
    /// substring of this string, and `false` otherwise.
    fn contains(s:string) bool {
        return self.index_of(s) is i64;
    }

    /// # slice
    ///
    /// Returns a new string that is a substring of this string.
    ///
    /// The substring is a slice of the original string starting from the `start` index and
    /// having `len` characters.
    fn slice(start:i64, len:i64) string {
        if start + len == 0 {
            return "";
        }
        let bytes = self.bytes();
        let  i = 0;
        let  j = 0;
        let byte_start_idx = 0;
        let byte_len = 0;
        while i < self.byte_len() {
            if j == start {
                byte_start_idx = i;
            }
            let c: u8 = bytes[i];
            let  len1 = 1;
            if c & 0b10000000 == 0 {
                len1 = 1;
            } else if c & 0b11100000 == 0b11000000 {
                len1 = 2;
            } else if c & 0b11110000 == 0b11100000 {
                len1 = 3;
            } else {
                len1 = 4;
            }
            i = i + len1;
            j = j + 1;
            if j == start + len {
                byte_len = i - byte_start_idx;
                break;
            }
        }

        if byte_len == 0 && len != 0 {
            pl_panic();
            return string {
                _len: 0,
                _byte_len: 0,
                data: int_to_ptr(0)
            };
        }else {
            return string {
                _len: len,
                _byte_len: byte_len,
                data: &bytes[ byte_start_idx]
            };
        }
    }

}


/// # from_chars
/// 
/// Converts a list of characters to a string.
pub fn from_chars(chars:[char]) string {
    let bytes:[u8] = [u8*4*arr_len(chars);];
    let i = 0;
    let j = 0;
    while j < arr_len(chars) {
        let code = chars[j] as u32;
        if code < 0x80 {
            bytes[i] = code as u8;
            i = i + 1;
        } else if code < 0x800 {
            bytes[i] = 0b11000000 as u8 | ((code >> 6) & 0b00011111) as u8;
            bytes[i + 1] = 0b10000000 as u8 | (code & 0b00111111) as u8;
            i = i + 2;
        } else if code < 0x10000 {
            bytes[i] = 0b11100000 as u8| ((code >> 12) & 0b00001111) as u8;
            bytes[i + 1] = 0b10000000 as u8| ((code >> 6) & 0b00111111) as u8;
            bytes[i + 2] = 0b10000000 as u8| (code & 0b00111111) as u8;
            i = i + 3;
        } else {
            bytes[i] = 0b11110000 as u8| ((code >> 18) & 0b00000111) as u8;
            bytes[i + 1] = 0b10000000 as u8| ((code >> 12) & 0b00111111) as u8;
            bytes[i + 2] = 0b10000000 as u8| ((code >> 6) & 0b00111111) as u8;
            bytes[i + 3] = 0b10000000 as u8| (code & 0b00111111) as u8;
            i = i + 4;
        }
        j = j + 1;
    }
    return string_from_bytes(bytes.slice(0, i));
}
