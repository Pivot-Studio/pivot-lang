use core::gc::string;
pub use std::io::print_s;


fn print_i64(i:i64) void;
fn print_i128(i:i128) void;
fn print_u64(i:u64) void;
fn print_u128(i:u128) void;


pub fn print_any<T>(t:T) void {
    let s = nameof<T>();
    print_s(s);
    print_s("( ");
    let b = false;
    if is_ptr<T>() {
        let result = unsafe_cast<*u8>(&t);
        let i = gc::ptr_to_int(*result);
        print_i64(i);
        print_s(" )");
        return;
    }
    match_type<bool>(t,{
        if _value {
            print_s("true");
        }else {
            print_s("false");
        }
        b = true;
    });
    match_type<i8>(t,{
        print_i64(_value as i64);
        b = true;
    });
    match_type<i16>(t,{
        print_i64(_value as i64);
        b = true;
    });
    match_type<i32>(t,{
        print_i64(_value as i64);
        b = true;
    });
    match_type<i64>(t,{
        print_i64(_value);
        b = true;
    });
    match_type<i128>(t,{
        print_i128(_value);
        b = true;
    });
    match_type<u8>(t,{
        print_u64(_value as u64);
        b = true;
    });
    match_type<u16>(t,{
        print_u64(_value as u64);
        b = true;
    });
    match_type<u32>(t,{
        print_u64(_value as u64);
        b = true;
    });
    match_type<u64>(t,{
        print_u64(_value);
        b = true;
    });
    match_type<u128>(t,{
        print_u128(_value);
        b = true;
    });
    match_type<gc::string>(t,{
        print_s("\"");
        print_s(_value);
        print_s("\"");
        b = true;
    });
    if b {
        print_s(" )");
        return;
    }
    forfields(t, {
        print_s(_field_name);
        print_s(": ");
        print_any(_field);
        print_s(" ");
    });
    print_s(")");
    return;
}

macro println {
    ($start:@expr) => {
        stdbuiltin::print_any($start);
        print_s("\n");
    };
    ($start:@expr$(,$expr:@expr)*) => {
        stdbuiltin::print_any($start);
        print_s(" ");
        $(
            stdbuiltin::print_any($expr);
            print_s(" ");
        )*
        print_s("\n");
    };
}
