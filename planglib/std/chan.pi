use std::mutex::*;
pub struct Chan<T> {
    buffer: Queue<T>;
    count: u64;
    capacity: u64;
    mtx: **MutexHandle;
    condvar: *CondVar;
}
struct Node<T> {
    data: T;
    next: *Node<T>;
}


struct Queue<T> {
    head: *Node<T>;
    tail: *Node<T>;
}

impl <T>Queue<T>{
    pub fn push(t: T) void {
        let node = Node<T>{};
        node.data = t;
        if gc::ptr_to_int(unsafe_cast<u8>(self.head)) == 0 {
            self.head = &node;
            self.tail = &node;
            return;
        }
        self.tail.next = &node;
        self.tail = &node;
        return;
    }

    pub fn pop() T {
        let node = self.head.next;
        let data = self.head.data;
        self.head = node;
        if gc::ptr_to_int(unsafe_cast<u8>(self.head)) == 0 {
            self.tail = node;
        }
        return data;
    }

}
pub fn channel<T>(sz: u64) Chan<T> {
    let ch = Chan<T> {};
    ch.buffer = Queue<T>{};
    ch.count = 0;
    ch.capacity = sz;
    ch.mtx = &&MutexHandle{};
    create_mutex(ch.mtx);
    create_condvar(&ch.condvar);
    return ch;
}
use std::io;
impl <S>Chan<S> {
    pub fn send(s: S) void {
        lock_mutex(*self.mtx);
        while self.count == self.capacity {
            condvar_wait(self.condvar, *self.mtx);
        }
        self.buffer.push(s);
        // io::printi64ln(self.count as i64);
        self.count = self.count + 1;
        if self.count == 1 {
            condvar_notify(self.condvar);
        }
        unlock_mutex(*self.mtx);
        return;
    }
    pub fn recv() S {
        lock_mutex(*self.mtx);
        while self.count == 0 {
            condvar_wait(self.condvar, *self.mtx);
        }
        let s = self.buffer.pop();
        self.count = self.count - 1;

        if self.count == self.capacity {
            condvar_notify(self.condvar);
        }
        
        unlock_mutex(*self.mtx);
        return s;
    }
    pub fn len() u64 {
        
        return self.count;
    }
}