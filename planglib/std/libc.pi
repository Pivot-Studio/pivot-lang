pub fn LibC__read(fd:i32,buf:*u8, size:u64) i64;
pub fn LibC__write(fd:i32, buf:*u8, size:u64) i64;
pub fn LibC__open(path:*u8, byte_len:i64, flags:i32) i32;
pub fn LibC__close(fd:i32) i32;


const STDIN_FILENO:i32;
const STDOUT_FILENO:i32;
const STDERR_FILENO:i32;

const O_RDONLY:i32;
const O_WRONLY:i32;
const O_RDWR:i32;
const O_CREAT:i32;



pub fn pl_clock_gettime(sec:*i64, nsec:*u32) void;


pub fn LibC__memcpy(dest:*u8, src:*u8, n:u64) *u8;

/// `buf`: `*u8` - buffer to fill with random data  
/// `buflen`: `u64` - length of buffer(in bytes)  
/// `flags`: `u32` - flags to pass to getrandom syscall  
///  - `0`: `GRND_RANDOM` - use /dev/random  
///  - `1`: `GRND_NONBLOCK` - return EAGAIN if not enough entropy
pub fn LibC__getrandom(buf:*u8, buflen:u64, flags:u32) i64;

use std::libuv::*;

pub fn LibC__addrinfo_ai_addr(ai:*addrinfo) *u8;
