fn DioGC__malloc(size: i64, obj_type: u8, rsp:i64) *u8;

pub fn DioGC__collect() void;

pub fn DioGC__malloc_no_collect(size: i64, obj_type: u8) *u8;

pub fn DioGC__disable_auto_collect() void;

pub fn DioGC__enable_auto_collect() void;

fn DioGC__stuck_begin(sp:i64) void;

fn DioGC__stuck_end() void;
fn DioGC__add_coro_stack(sp:i64, stack:* u8) void;
fn DioGC__remove_coro_stack(stack:i64) void;

pub fn DioGC__safepoint(sp:i64) void;

pub fn DioGC__register_global(p:i64) void;

pub fn DioGC__set_eva(ev:bool) void;

pub fn add_coro_stack(stack:* u8) void {
    DioGC__add_coro_stack(asm_sp(), stack);
    return;
}

pub fn remove_coro_stack(stack:i64) void {
    DioGC__remove_coro_stack(stack);
    return;
}

pub struct string {
    _len: i64;
    _byte_len: i64;
    data: *u8;
}

pub fn memcpy(dst: *u8, src: *u8, len: i64) void;

/// # int_to_ptr
/// 
/// convert int to ptr
/// 
/// ## Safety
/// 
/// The pl's gc is a relocate gc which has an evacuate algorithm.
/// During the evacuation, the pointers might be moved to another location,
/// and all references to the moved pointer known by gc will be 
/// automatically fixed to the new location. However, the poinetr 
/// stored in interger is not the case.
/// 
/// As such, this function is highly dangerous and shall
/// be used for debug purpose only. In no case the function shall be used
/// to modify pointers.
pub fn int_to_ptr(i: i64) *u8;


/// # ptr_to_int
/// 
/// convert ptr to int
/// 
/// ## Safety
/// 
/// Shall be used for debug porpose only. See [int_to_ptr](gc.pi#48)
pub fn ptr_to_int(ptr: *u8) i64;

pub fn utf8_count(ptr: *u8, len:i64) i64;

    fn printi64ln(i:i64) void;

impl string {
    pub fn append(str: string) void {
        let old = self.data;
        // let atomic: u8 = 0;
        // let new = DioGC__malloc(self._byte_len + str._byte_len, atomic);
        // memcpy(new, old, self._byte_len);
        let arr = [u8*self._byte_len + str._byte_len;];
        memcpy(&arr[0], old, self._byte_len);
        // let new_i_end = ptr_to_int(new) + self._byte_len;
        let new_end = &arr[self._byte_len];
        memcpy(new_end, str.data, str._byte_len);
        self.data = &arr[0];
        self._len = self._len + str._len;
        self._byte_len = self._byte_len + str._byte_len;
        return;
    }

    pub fn from_raw(data:*u8, byte_len:i64) void {
        self.data = data;
        self._byte_len = byte_len;
        self._len = utf8_count(data, byte_len);
        return;
    }
    pub fn raw() *u8 {
        return self.data;
    }

    pub fn len() i64 {   
        return self._len;
    }

    pub fn byte_len() i64 {
        return self._byte_len;
    }

    pub fn bytes() [u8] {
        return arr_from_raw(self.data, self._byte_len);
    }
    

}

pub fn string_from_bytes(bytes:[u8]) string {

    let s = string {
        _len: utf8_count(&bytes[0], arr_len(bytes)),
        _byte_len: arr_len(bytes),
        data: &bytes[0],
    };
    return s;
}

