fn DioGC__malloc(size: i64, obj_type: u8, rsp:i64) *();

pub fn gc_print_block_time() void;

pub fn DioGC__collect(rsp:i64) void;

pub fn DioGC__malloc_no_collect(size: i64, obj_type: u8) *u8;

pub fn DioGC__disable_auto_collect() void;

pub fn DioGC__enable_auto_collect() void;

pub fn DioGC__get_stw_num() i64;

pub fn DioGC__stuck_begin(sp:i64) void;

pub fn DioGC__pin(ptr: * u8) void;

fn DioGC__keep_live_pinned(ptr: *u8) void;

fn DioGC__rm_live_pinned(ptr: *u8) void;

fn DioGC__is_pinned(ptr: *u8) i32;

pub fn is_pinned<T>(ptr: *T) bool {
    return DioGC__is_pinned(unsafe_cast<u8>(ptr)) == 1;
}

pub fn gc_set_high_sp(sp:i64) void;

pub fn keep_alive_pinned<T>(ptr: *T) void {
    DioGC__keep_live_pinned(unsafe_cast<u8>(ptr));
    return;
}

pub fn rm_alive_pinned<T>(ptr: *T) void {
    DioGC__rm_live_pinned(unsafe_cast<u8>(ptr));
    return;
}

pub fn DioGC__stuck_end() void;
fn DioGC__add_coro_stack(sp:i64, stack:* u8) void;
fn DioGC__remove_coro_stack(stack:i64) void;

pub fn DioGC__safepoint(sp:i64) void;

pub fn DioGC__register_global(p:i64, tp:i8) void;

pub fn DioGC__set_eva(ev:bool) void;

pub fn add_coro_stack(stack:* u8) void {
    DioGC__add_coro_stack(asm_sp(), stack);
    return;
}

pub fn remove_coro_stack(stack:i64) void {
    DioGC__remove_coro_stack(stack);
    return;
}

pub fn pin<T>(ptr: *T) void {
    DioGC__pin(unsafe_cast<u8>(ptr));
    return;
}

/// # string
/// 
/// Built-in string type
pub struct string {
    _len: i64;
    _byte_len: i64;
    data: *u8;
}

pub fn memcpy(dst: *u8, src: *u8, len: i64) void;

/// # int_to_ptr
/// 
/// convert int to ptr
/// 
/// ## Safety
/// 
/// The pl's gc is a relocate gc which has an evacuate algorithm.
/// During the evacuation, the pointers might be moved to another location,
/// and all references to the moved pointer known by gc will be 
/// automatically fixed to the new location. However, the poinetr 
/// stored in interger is not the case.
/// 
/// As such, this function is highly dangerous and shall
/// be used for debug purpose only. In no case the function shall be used
/// to modify pointers.
pub fn int_to_ptr(i: i64) *u8;


/// # ptr_to_int
/// 
/// convert ptr to int
/// 
/// ## Safety
/// 
/// Shall be used for debug porpose only. See [int_to_ptr](gc.pi#48)
pub fn ptr_to_int(ptr: *u8) i64;

pub fn utf8_count(ptr: *u8, len:i64) i64;

impl string {
    pub fn append(str: string) void {
        let old = self.data;
        let atomic: u8 = 0;
        let new = DioGC__malloc(self._byte_len + str._byte_len, atomic, asm_sp());
        memcpy(unsafe_cast<u8>(new), old, self._byte_len);
        // let arr = arr_from_raw(unsafe_cast<u8>(new), self._byte_len + str._byte_len);
        // let p = ptr_to_int(unsafe_cast<u8>(new));
        let new_i_end = ptr_to_int(unsafe_cast<u8>(new)) + self._byte_len;
        let new_end = int_to_ptr(new_i_end);
        memcpy(new_end, str.data, str._byte_len);
        self.data = unsafe_cast<u8>(new);
        self._len = self._len + str._len;
        self._byte_len = self._byte_len + str._byte_len;
        return;
    }

    pub fn from_raw(data:*u8, byte_len:i64) void {
        self.data = data;
        self._byte_len = byte_len;
        self._len = utf8_count(data, byte_len);
        return;
    }
    pub fn raw() *u8 {
        return self.data;
    }

    pub fn len() i64 {   
        return self._len;
    }

    pub fn byte_len() i64 {
        return self._byte_len;
    }

    pub fn bytes() [u8] {
        return arr_from_raw(self.data, self._byte_len);
    }

    pub fn cstr() *u8 {
        let arr = [u8*self._byte_len + 1;];
        memcpy(&arr[0], self.data, self._byte_len);
        arr[self._byte_len] = 0 as u8;
        return &arr[0];
    }

    pub fn chars() [char] {
        let bytes = arr_from_raw(self.data, self._byte_len);
        let chars = [char*self._len;];
        let i = 0;
        let j = 0;
        while j < self._len {
            let c: u8 = bytes[i];
            let  len = 1;
            let  code = 0 as u32;
            if c & 0b10000000 == 0 {
                len = 1;
                code = (c & 0b01111111) as u32;
            } else if c & 0b11100000 == 0b11000000 {
                len = 2;
                code = (c & 0b00011111) as u32;
            } else if c & 0b11110000 == 0b11100000 {
                len = 3;
                code = (c & 0b00001111) as u32;
            } else if c & 0b11111000 == 0b11110000 {
                len = 4;
                code = (c & 0b00000111) as u32;
            }
            for let k = 1; k < len; k = k + 1 {
                code = code << 6;
                code = code | (bytes[i + k] & 0b00111111) as u32;
            }
            chars[j] = code as char;
            j = j + 1;
            i = i + len;
        }
        return chars;
    }
}

pub fn string_from_bytes(bytes:[u8]) string {

    let s = string {
        _len: utf8_count(&bytes[0], arr_len(bytes)),
        _byte_len: arr_len(bytes),
        data: &bytes[0],
    };
    return s;
}


pub fn string_eq(l:string, r:string) bool {
    if l.len() != r.len() {
        return false;
    }
    for let i = 0; i < l.len(); i = i + 1 {
        if l.bytes()[i] != r.bytes()[i] {
            return false;
        }
    }
    return true;
}


/// # malloc
/// 
/// Allocate memory using GC
/// 
/// The allocated memory is treated as atomic, which means the memory
/// shall not contain any gc pointer.
pub fn malloc(size: i64) * () {
    return DioGC__malloc(size, 0 as u8, asm_sp());
}


/// # malloc_pinned
/// 
/// Allocate memory using GC
/// 
/// The allocated memory is treated as pinned-atomic, which means the memory
/// shall not contain any gc pointer, and it will not be moved by gc.
pub fn malloc_pinned(size: i64) * () {
    let mem = DioGC__malloc(size, 0 as u8, asm_sp());
    pin(mem);
    return mem;
}