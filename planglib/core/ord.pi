
pub trait Ord<T> {
    fn cmp(other: T) i64;
}

impl Ord<i64> for i64 {
    fn cmp(other: i64) i64 {
        if *self < other {
            return -1;
        } else if *self > other {
            return 1;
        } else {
            return 0;
        }
    }
}

impl Ord<i32> for i32 {
    fn cmp(other: i32) i64 {
        if *self < other {
            return -1;
        } else if *self > other {
            return 1;
        } else {
            return 0;
        }
    }
}

impl Ord<i16> for i16 {
    fn cmp(other: i16) i64 {
        if *self < other {
            return -1;
        } else if *self > other {
            return 1;
        } else {
            return 0;
        }
    }
}

impl Ord<i8> for i8 {
    fn cmp(other: i8) i64 {
        if *self < other {
            return -1;
        } else if *self > other {
            return 1;
        } else {
            return 0;
        }
    }
}

impl Ord<u64> for u64 {
    fn cmp(other: u64) i64 {
        if *self < other {
            return -1;
        } else if *self > other {
            return 1;
        } else {
            return 0;
        }
    }
}

impl Ord<u32> for u32 {
    fn cmp(other: u32) i64 {
        if *self < other {
            return -1;
        } else if *self > other {
            return 1;
        } else {
            return 0;
        }
    }
}

impl Ord<u16> for u16 {
    fn cmp(other: u16) i64 {
        if *self < other {
            return -1;
        } else if *self > other {
            return 1;
        } else {
            return 0;
        }
    }
}

impl Ord<u8> for u8 {
    fn cmp(other: u8) i64 {
        if *self < other {
            return -1;
        } else if *self > other {
            return 1;
        } else {
            return 0;
        }
    }
}

impl Ord<f64> for f64 {
    fn cmp(other: f64) i64 {
        if *self < other {
            return -1;
        } else if *self > other {
            return 1;
        } else {
            return 0;
        }
    }
}

impl Ord<f32> for f32 {
    fn cmp(other: f32) i64 {
        if *self < other {
            return -1;
        } else if *self > other {
            return 1;
        } else {
            return 0;
        }
    }
}

impl Ord<bool> for bool {
    fn cmp(other: bool) i64 {
        if *self == other {
            return 0;
        } else if *self {
            return 1;
        } else {
            return -1;
        }
    }
}

impl Ord<i128> for i128 {
    fn cmp(other: i128) i64 {
        if *self < other {
            return -1;
        } else if *self > other {
            return 1;
        } else {
            return 0;
        }
    }
}

impl Ord<u128> for u128 {
    fn cmp(other: u128) i64 {
        if *self < other {
            return -1;
        } else if *self > other {
            return 1;
        } else {
            return 0;
        }
    }
}

pub trait Sort {
    fn sort() void;
}

impl <T:Ord<T>> Sort for [T] {
    fn sort() void {
        let i = 0;
        while i < arr_len(*self) {
            let j = i + 1;
            while j < arr_len(*self) {
                if (*self)[i].cmp((*self)[j]) > 0 {
                    let tmp = (*self)[i];
                    (*self)[i] = (*self)[j];
                    (*self)[j] = tmp;
                }
                j = j + 1;
            }
            i = i + 1;
        }
        return;
    }
}

