pub struct None {
}
pub type Option<T> = T|None;


impl <T> Option<T> {
    pub fn map<R>(f:|T|=>R) Option<R> {
        if (*self) is None {
            return None{};
        }
        let v = (*self) as T!;
        return f(v);
    }
    pub fn flatmap<R>(f:|T|=>Option<R>) Option<R> {
        if (*self) is None {
            return None{};
        }
        let v = (*self) as T!;
        return f(v);
    }
}
pub use core::string::ToString;
impl <T:ToString>ToString for Option<T> {
    fn to_string() gc::string {
        let v = *self;
        if v is None {
            return "None";
        } else {
            let ret = "Some(";
            ret.append((v as T!).to_string());
            ret.append(")");
            return ret;
        }
    }
}

pub use core::gc::string;
pub use core::gc::string_from_bytes;
pub use core::ord::Ord;

pub type Result<T|E> = T|E;


impl <T|E> Result<T|E> {
    pub fn map<R>(f:|T|=>R) Result<R|E> {
        if (*self) is E {
            return (*self) as E!;
        }
        let v = (*self) as T!;
        return f(v);
    }

    pub fn flatmap<R>(f:|T|=>Result<R|E>) Result<R|E> {
        if (*self) is E {
            return (*self) as E!;
        }
        let v = (*self) as T!;
        return f(v);
    }

    pub fn map_err<R>(f:|E|=>R) Result<T|R> {
        if (*self) is T {
            return (*self) as T!;
        }
        let v = (*self) as E!;
        return f(v);
    }

    pub fn flatmap_err<R>(f:|E|=>Result<T|R>) Result<T|R> {
        if (*self) is T {
            return (*self) as T!;
        }
        let v = (*self) as E!;
        return f(v);
    }
}

impl <T:ToString|E:ToString>ToString for Result<T|E> {
    fn to_string() gc::string {
        let v = *self;
        if v is E {
            let ret = "Err(";
            ret.append((v as E!).to_string());
            ret.append(")");
            return ret;
        } else {
            let ret = "Ok(";
            ret.append((v as T!).to_string());
            ret.append(")");
            return ret;
        }
    }
}

pub use core::hash::Hash;
pub use core::eq::Eq;
